From b9df8517df0f8af771f4e7b5d266ab0e04ddc5e6 Mon Sep 17 00:00:00 2001
From: Sven Obser <sven.obser@backes-srt.de>
Date: Mon, 2 Oct 2017 17:08:19 +0200
Subject: [PATCH 11/13] Use correct token identifier.

---
 contracts/PLToken.sol | 18 +++++++++---------
 1 file changed, 9 insertions(+), 9 deletions(-)

diff --git a/contracts/PLToken.sol b/contracts/PLToken.sol
index 9b19697..69e7e88 100644
--- a/contracts/PLToken.sol
+++ b/contracts/PLToken.sol
@@ -32,7 +32,7 @@ contract PLToken is StandardToken {
     uint256 public constant TOKEN_CREATION_CAP = 10 * (10**6) * 10**decimals; // 10 million PLTs
     uint256 public constant ETH_RECEIVED_CAP = 50 * (10**3) * 10**decimals; // 50 000 ETH
     uint256 public constant ETH_RECEIVED_MIN = 10 * (10**3) * 10**decimals; // 10 000 ETH
-    uint256 public constant TOKEN_MIN = 1 * 10**decimals; // 1 NET
+    uint256 public constant TOKEN_MIN = 1 * 10**decimals; // 1 PLT
 
     // We need to keep track of how much ether have been contributed, since we have a cap for ETH too
     uint256 public totalReceivedEth = 0;
@@ -157,7 +157,7 @@ contract PLToken is StandardToken {
     }
 
 
-    /// @dev Accepts ether and creates new NET tokens
+    /// @dev Accepts ether and creates new PLT tokens
     function createTokens()
     payable
     external
@@ -211,13 +211,13 @@ contract PLToken is StandardToken {
     external
     isRedeeming
     {
-        uint256 netVal = balances[msg.sender];
-        require(netVal >= TOKEN_MIN); // At least TOKEN_MIN tokens have to be redeemed
+        uint256 pltVal = balances[msg.sender];
+        require(pltVal >= TOKEN_MIN); // At least TOKEN_MIN tokens have to be redeemed
 
         // Burn Tokens on redemption
-        require(super.transfer(0x0, netVal));
+        require(super.transfer(0x0, pltVal));
         // Log the redeeming of this tokens
-        LogRedeemPLT(msg.sender, netVal, leoAddress);
+        LogRedeemPLT(msg.sender, pltVal, leoAddress);
     }
 
 
@@ -300,15 +300,15 @@ contract PLToken is StandardToken {
         require(block.number > fundingEndBlock); // Prevents refund until fundraising period is over
         require(totalReceivedEth < ETH_RECEIVED_MIN);  // No refunds if the minimum has been reached
 
-        uint256 netVal = balances[msg.sender];
-        require(netVal > 0);
+        uint256 pltVal = balances[msg.sender];
+        require(pltVal > 0);
         uint256 ethVal = ethBalances[msg.sender];
         require(ethVal > 0);
 
         // Update the state only after all the checks have passed
         balances[msg.sender] = 0;
         ethBalances[msg.sender] = 0;
-        totalSupply = SafeMath.sub(totalSupply, netVal); // Extra safe
+        totalSupply = SafeMath.sub(totalSupply, pltVal); // Extra safe
 
         // Log this refund
         LogRefund(msg.sender, ethVal);
-- 
2.7.4.windows.1

